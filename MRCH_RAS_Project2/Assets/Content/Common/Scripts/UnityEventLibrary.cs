using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
using Cysharp.Threading.Tasks;
using Sirenix.OdinInspector;

namespace MRCH.Common.Interact
{
    [Serializable]
    public class NamedUnityEvent
    {
        [Tooltip("The name of the event."), Title("$eventName")]
        public string eventName;

        [Tooltip("The delay in seconds before invoking the event."), Space, Unit(Units.Second)]
        public float waitBeforeInvoke = 0f;

        [Tooltip("The Unity event to invoke."), Space(10)]
        public UnityEvent unityEvent;
    }


    [Serializable]
    public class NamedUnityEventSequence
    {
        [Title("$sequenceName")] public string sequenceName;

        [Tooltip("The array of named Unity events in the sequence."), Space(10),
         InfoBox(
             "The order of the events in the array will be the order of the events in the sequence with the consideration of 'WaitBeforeInvoke'")]
        public NamedUnityEvent[] namedUnityEventSequence;
    }

    /// <summary>
    /// author: Shengyang Billiton Peng
    /// 
    /// This can be used as the library of single UnityEvents and UnityEventSequences;
    /// Parts of the summary are generated by AI.
    /// </summary>
    public abstract class UnityEventLibrary : MonoBehaviour
    {
        // [TitleGroup("UnityEventLibrary",boldTitle: true, horizontalLine: true, indent: false),Tooltip("This can be used as the library of single UnityEvents and UnityEventSequences;")]

        [PropertySpace(SpaceAfter = 30),
         TitleGroup("Single Unity Events", alignment: TitleAlignments.Centered, horizontalLine: true, boldTitle: true,
             indent: false), Searchable,
         InfoBox(
             "Create a list of Unity Events to store the events you want to invoke.Then use 'TriggerEventByName' to invoke them.")]
        public List<NamedUnityEvent> NamedUnityEvents = new();

        [TitleGroup("Event Sequences", alignment: TitleAlignments.Centered, horizontalLine: true, boldTitle: true,
             indent: false), Space(20),
         InfoBox(
             "Create a list of Unity Event Sequences to store the event sequences you want to invoke. Then use 'TriggerSequenceByName' to invoke them. ")]
        [InfoBox("N.B.: The events in one sequence is not invoked in parallel, but in sequence.",
             InfoMessageType.Warning),
         Searchable]
        public List<NamedUnityEventSequence> NamedUnityEventSequences = new();

        /// <param name="eventName">The name of the event to check.</param>
        /// <returns>The named Unity event if found; otherwise, null.</returns>
        /// <summary>
        /// Checks if an event with the given name exists in the library and returns it.
        /// Derived classes can override this method to provide custom event search logic.
        /// </summary>
        protected virtual NamedUnityEvent GetNamedEventByName(string eventName)
        {
            foreach (var namedEvent in NamedUnityEvents)
            {
                if (namedEvent.eventName == eventName)
                {
                    return namedEvent;
                }
            }

            Debug.LogWarning($"Event with name {eventName} not found.");
            return null;
        }

        /// <summary>
        /// Checks if a sequence with the given name exists in the library and returns it.
        /// Derived classes can override this method to provide custom sequence search logic.
        /// </summary>
        protected virtual NamedUnityEventSequence GetNamedSequenceByName(string sequenceName)
        {
            foreach (var namedSequence in NamedUnityEventSequences)
            {
                if (namedSequence.sequenceName == sequenceName)
                {
                    return namedSequence;
                }
            }

            Debug.LogWarning($"Sequence with name {sequenceName} not found.");
            return null;
        }

        /// <summary>
        /// Triggers a named UnityEvent asynchronously.
        /// Derived classes can override this to modify how the event is triggered.
        /// </summary>
        protected virtual async UniTask TriggerEventAsync(NamedUnityEvent namedEvent)
        {
            if (namedEvent == null) return;
            await UniTask.Delay(TimeSpan.FromSeconds(namedEvent.waitBeforeInvoke));
            namedEvent.unityEvent.Invoke();
        }

        /// <summary>
        /// Triggers a sequence of UnityEvents asynchronously.
        /// Derived classes can override this to modify how the sequence is triggered.
        /// </summary>
        protected virtual async UniTask TriggerEventSequenceAsync(NamedUnityEventSequence sequence)
        {
            if (sequence == null) return;

            foreach (var namedEvent in sequence.namedUnityEventSequence)
            {
                await TriggerEventAsync(namedEvent);
            }
        }

        /// <summary>
        /// Public method to trigger an event by name.
        /// Derived classes can override to change how events are triggered by name.
        /// </summary>
        public virtual async void TriggerEventByName(string eventName)
        {
            var namedEvent = GetNamedEventByName(eventName);
            await TriggerEventAsync(namedEvent);
        }

        /// <summary>
        /// Public method to trigger a sequence by name.
        /// Derived classes can override to change how sequences are triggered by name.
        /// </summary>
        public virtual async void TriggerSequenceByName(string sequenceName)
        {
            var sequence = GetNamedSequenceByName(sequenceName);
            await TriggerEventSequenceAsync(sequence);
        }
    }
}